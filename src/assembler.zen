usingnamespace @import("const.zen");
usingnamespace @import("bit_utils.zen");
const InstructionSet = @import("instruction.zen").InstructionSet;
const AddInst = InstructionSet.AddInst;
const AddiInst = InstructionSet.AddiInst;
const BltInst = InstructionSet.BltInst;
const JalInst = InstructionSet.JalInst;
const JalrInst = InstructionSet.JalrInst;
const Reg = @import("cpu.zen").Reg;

pub const Assembler = struct {
    const Self = @This();

    pub fn init() Self {
        return Self{};
    }

    pub fn assemble(program: []PROG_TYPE) [MEM_SIZE]u8 {
        var rom = [_]u8{0} ** MEM_SIZE;
        var i: usize = 0;
        for (program) |code| {
            // little endian
            rom[i] = @truncate(u8, code>>24);
            rom[i+1] = @truncate(u8, code>>16);
            rom[i+2] = @truncate(u8, code>>8);
            rom[i+3] = @truncate(u8, code);
            i += 4;
        }
        return rom;
    }
};

// 32                           20 19     15 14    12 11             7 6        0
// +------------------------------+---------+--------+----------------+----------+
// |          imm[11:0]           |   rs1   | funct3 |       rd       |  opcode  |
// +------------------------------+---------+--------+----------------+----------+
fn asmIType(opcode: u7, rd: Reg, funct3: PROG_TYPE, rs1: Reg, imm_i: i12) PROG_TYPE {
    const rd_i = regToUint(rd);
    const rs1_i = regToUint(rs1);
    const imm: PROG_TYPE = iToU(i12, u12, imm_i);
    return (imm << 20) | (rs1_i << 15) | (funct3 << 12) | (rd_i << 7) | opcode;
}

// 32           25 24           20 19     15 14    12 11             7 6        0
// +------------------------------+---------+--------+----------------+----------+
// |    funct7    |     rs2       |   rs1   | funct3 |       rd       |  opcode  |
// +------------------------------+---------+--------+----------------+----------+
fn asmRType(opcode: u7, rd: Reg, funct3: PROG_TYPE, rs1: Reg, rs2: Reg, funct7: PROG_TYPE) PROG_TYPE {
    const rd_i = regToUint(rd);
    const rs1_i = regToUint(rs1);
    const rs2_i = regToUint(rs2);
    return (funct7 << 25) | (rs2_i << 20) | (rs1_i << 15) | (funct3 << 12) | (rd_i << 7) | opcode;
}

// 32    31 30          21 21   20 19              12 11             7 6        0
// +-------+--------------+-------+------------------+----------------+----------+
// |imm[20]|  imm[10:1]   |imm[11]|    imm[19:12]    |       rd       |  opcode  |
// +-------+--------------+-------+------------------+----------------+----------+
fn asmJType(opcode: u7, rd: Reg, imm: i20) PROG_TYPE {
    const rd_i = regToUint(rd);
    const imm_u = iToU(i20, u20, imm);
    const imm10_1: PROG_TYPE = @truncate(u10, imm_u);
    const imm11: PROG_TYPE = @truncate(u1, imm_u >> 10);
    const imm12_19: PROG_TYPE = @truncate(u8, imm_u >> 11);
    const imm20: PROG_TYPE = @truncate(u1, imm_u >> 19);
    return (imm20 << 31) | (imm10_1 << 22) | (imm11 << 20) | (imm12_19 << 12) | (rd_i << 7) | opcode;
}

//  31   31 30    25 24           20 19     15 14    12 11     8 7     7 6        0
// +-------+--------+---------------+------------------+--------+-------+----------+
// |imm[12]|im[10:5]|      rs2      |   rs1   | funct3 |imm[4:1]|imm[11]|  opcode  |
// +-------+--------+---------------+------------------+--------+-------+----------+
fn asmBType(opcode: u7, imm: i12, funct3: PROG_TYPE, rs1: Reg, rs2: Reg) PROG_TYPE {
    const rs1_u = regToUint(rs1);
    const rs2_u = regToUint(rs2);
    // runtime error
    // cannot cast i12 to u12
    const imm_u = iToU(i12, u12, imm);
    const imm1_4: PROG_TYPE = @truncate(u4, imm_u);
    const imm5_10: PROG_TYPE = @truncate(u6, imm_u >> 4);
    const imm11: PROG_TYPE = @truncate(u1, imm_u >> 10);
    const imm12: PROG_TYPE = @truncate(u1, imm_u >> 11);
    return (imm12 << 31) | (imm5_10 << 25) | (rs2_u << 20) | (rs1_u << 15) | (funct3 << 12) | (imm1_4 << 8) | (imm11 << 7) | opcode;
}

// add rd, rs1, rs2
pub fn asmAdd(rd: Reg, rs1: Reg, rs2: Reg) PROG_TYPE {
    const opcode = AddInst.opcode;
    const funct3: PROG_TYPE = 0;
    const funct7: PROG_TYPE = 0;
    return asmRType(opcode, rd, funct3, rs1, rs2, funct7);
}

// addi rd, rs1, imm
pub fn asmAddi(rd: Reg, rs1: Reg, imm: i12) PROG_TYPE {
    const opcode = AddiInst.opcode;
    const funct3: PROG_TYPE = 0;
    return asmIType(opcode, rd, funct3, rs1, imm);
}

// blt rs1, rs2, offset
pub fn asmBlt(rs1: Reg, rs2: Reg, offset: i12) u32 {
    const opcode = BltInst.opcode;
    const funct3: PROG_TYPE = 0b100;
    return asmBType(opcode, offset, funct3, rs1, rs2);
}

// ret
pub fn asmRet() PROG_TYPE {
    return asmJalr(Reg.Zero, 0, Reg.Ra);
}

// jal rd, offset
pub fn asmJal(rd: Reg, offset: i20) PROG_TYPE {
    const opcode = JalInst.opcode;
    return asmJType(opcode, rd, offset);
}

// jalr rd, offset(rs1)
pub fn asmJalr(rd: Reg, offset: i12, rs1: Reg) PROG_TYPE {
    const opcode = JalrInst.opcode;
    const funct3: PROG_TYPE = 0;
    return asmIType(opcode, rd, funct3, rs1, offset);
}

fn regToUint(r: Reg) PROG_TYPE {
    return @enumToInt(r);
}