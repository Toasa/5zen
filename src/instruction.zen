// RISC-V's opcode (represented by 7bits in RV32I)
// is not unique value for each instruction.
pub const Opcode = enum {
    Add,
    Addi, // Add immediate
    Blt,  // Branch if less than
    Jal,  // Jump and link
    Jalr, // Jump and link register
};

pub const InstructionSet = union(Opcode) {
    const Self = @This();
    Add: AddInst,
    Addi: AddiInst,
    Blt: BltInst,
    Jal: JalInst,
    Jalr: JalrInst,

    pub fn createAdd(operand: Operand) Self {
        return Self{ .Add = AddInst.init(operand) };
    }

    pub fn createAddi(operand: Operand) Self {
        return Self{ .Addi = AddiInst.init(operand) };
    }

    pub fn createBlt(operand: Operand) Self {
        return Self{ .Blt = BltInst.init(operand) };
    }

    pub fn createJal(operand: Operand) Self {
        return Self{ .Jal = JalInst.init(operand) };
    }

    pub fn createJalr(operand: Operand) Self {
        return Self{ .Jalr = JalrInst.init(operand) };
    }

    pub const AddInst = struct {
        pub const opcode: u7 = 0b0110011;
        const T: Type = T.R;
        operand: Operand,
        
        fn init(operand: Operand) @This() {
            return @This() { .operand = operand };
        }
    };

    pub const AddiInst = struct {
        pub const opcode: u7 = 0b0010011;
        const T: Type = T.I;
        operand: Operand,
        
        fn init(operand: Operand) @This() {
            return @This(){ .operand = operand };
        }
    };

    pub const BltInst = struct {
        pub const opcode: u7 = 0b1100011;
        const T: Type = T.B;
        operand: Operand,

        fn init(operand: Operand) @This() {
            return @This(){ .operand = operand };
        }
    };

    pub const JalInst = struct {
        pub const opcode: u7 = 0b1101111;
        const T: Type = T.J;
        operand: Operand,
        
        fn init(operand: Operand) @This() {
            return @This(){ .operand = operand };
        }
    };

    pub const JalrInst = struct {
        pub const opcode: u7 = 0b1100111;
        const T: Type = T.I;
        operand: Operand,
        
        fn init(operand: Operand) @This() {
            return @This(){ .operand = operand };
        }
    };
};

const Type = enum {
    R,
    I,
    B,
    J,
};

pub const Operand = union(Type) {
    R: RType,
    I: IType,
    B: BType,
    J: JType,

    pub const RType = struct {
        rs1: u5,
        rs2: u5,
        rd: u5,
        func3: u3,
        func7: u7,

        pub fn init(rs1: u5, rs2: u5, rd: u5, func3: u3, func7: u7) @This() {
            return @This() {
                .rs1 = rs1,
                .rs2 = rs2,
                .rd = rd,
                .func3 = func3,
                .func7 = func7,
            };
        }
    };

    pub const IType = struct {
        rs1: u5,
        rd: u5,
        imm: i12,
        func3: u3,

        pub fn init(rs1: u5, rd: u5, imm: i12, func3: u3) @This() {
            return @This() {
                .rs1 = rs1,
                .rd = rd,
                .imm = imm,
                .func3 = func3,
            };
        }
    };

    pub const BType = struct {
        rs1: u5,
        rs2: u5,
        imm: i12,
        func3: u3,

        pub fn init(rs1: u5, rs2: u5, imm: i12, func3: u3) @This() {
            return @This() {
                .rs1 = rs1,
                .rs2 = rs2,
                .imm = imm,
                .func3 = func3,
            };
        }
    };

    pub const JType = struct {
        rd: u5,
        imm: i20,

        pub fn init(rd: u5, imm: i20) @This() {
            return @This() {
                .rd = rd,
                .imm = imm,
            };
        }
    };
};